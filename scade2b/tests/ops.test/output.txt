

 Node Parsed :
NODE Op_mod (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
LET 
    
     
   rr = mod(aa, bb);  
TEL 

Node normalized : 
NODE Op_mod (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = mod(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_mod (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = mod(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  



 Node Parsed :
NODE Op_mul (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
LET 
    
     
   rr = mul(aa, bb);  
TEL 

Node normalized : 
NODE Op_mul (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = mul(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_mul (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = mul(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  



 Node Parsed :
NODE Op_not (aa : bool) RETURNS (rr : bool) 
VAR ; 
LET 
    
     
   rr = !(aa);  
TEL 

Node normalized : 
NODE Op_not (aa : bool) RETURNS (rr : bool) 
VAR ; 
PRE : aa : bool 
LET 
   rr = !(aa); 
TEL 
POST : rr : bool  
LAMBDAS :  

Node normalized : 
NODE Op_not (aa : bool) RETURNS (rr : bool) 
VAR ; 
PRE : aa : bool 
LET 
   rr = !(aa); 
TEL 
POST : rr : bool  
LAMBDAS :  



 Node Parsed :
NODE Op_div (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
LET 
    
     
   rr = div(aa, bb);  
TEL 

Node normalized : 
NODE Op_div (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = div(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_div (aa : int; bb : int) RETURNS (rr : int) 
VAR ; 
PRE : bb : int ;
      aa : int 
LET 
   rr = div(aa, bb); 
TEL 
POST : rr : int  
LAMBDAS :  



 Node Parsed :
NODE Op_unops (aa : int) RETURNS (rr : int) 
VAR ; 
LET 
    
   bb : int; cc : int  
   rr = add(bb, cc);
   cc = bb;
   bb = -(aa);  
TEL 

Node normalized : 
NODE Op_unops (aa : int) RETURNS (rr : int) 
VAR bb : int; cc : int; 
PRE : aa : int 
LET 
   rr = add(bb, cc);
   cc = bb;
   bb = -(aa); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_unops (aa : int) RETURNS (rr : int) 
VAR bb : int; cc : int; 
PRE : aa : int 
LET 
   bb = -(aa);
   cc = bb;
   rr = add(bb, cc); 
TEL 
POST : rr : int  
LAMBDAS :  



 Node Parsed :
NODE Op_cmp (aa : int; bb : int; cc : int; dd : int; ee : int; ff : int) RETURNS (
rr : bool) 
VAR ; 
LET 
    
   zz : bool  
   rr = zz;
   zz = and(and(or(le(aa, bb), ge(aa, bb)), or(lt(cc, dd), gt(cc, dd))), or
           (eq(ee, ff), neq(ee, ff)));  
TEL 

Node normalized : 
NODE Op_cmp (aa : int; bb : int; cc : int; dd : int; ee : int; ff : int) RETURNS (
rr : bool) 
VAR zz : bool; 
PRE : ff : int ;
      ee : int ;
      dd : int ;
      cc : int ;
      bb : int ;
      aa : int 
LET 
   rr = zz;
   zz = and(and(or(le(aa, bb), ge(aa, bb)), or(lt(cc, dd), gt(cc, dd))), or
           (eq(ee, ff), neq(ee, ff))); 
TEL 
POST : rr : bool  
LAMBDAS :  

Node normalized : 
NODE Op_cmp (aa : int; bb : int; cc : int; dd : int; ee : int; ff : int) RETURNS (
rr : bool) 
VAR zz : bool; 
PRE : ff : int ;
      ee : int ;
      dd : int ;
      cc : int ;
      bb : int ;
      aa : int 
LET 
   zz = and(and(or(le(aa, bb), ge(aa, bb)), or(lt(cc, dd), gt(cc, dd))), or
           (eq(ee, ff), neq(ee, ff)));
   rr = zz; 
TEL 
POST : rr : bool  
LAMBDAS :  



 Node Parsed :
NODE Op_minus (xx : int; yy : int) RETURNS (rr : int) 
VAR ; 
LET 
    
   zz : int  
   rr = zz;
   zz = sub(xx, yy);  
TEL 

Node normalized : 
NODE Op_minus (xx : int; yy : int) RETURNS (rr : int) 
VAR zz : int; 
PRE : yy : int ;
      xx : int 
LET 
   rr = zz;
   zz = sub(xx, yy); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_minus (xx : int; yy : int) RETURNS (rr : int) 
VAR zz : int; 
PRE : yy : int ;
      xx : int 
LET 
   zz = sub(xx, yy);
   rr = zz; 
TEL 
POST : rr : int  
LAMBDAS :  



 Node Parsed :
NODE Op_plus (xx : int; yy : int) RETURNS (rr : int) 
VAR ; 
LET 
    
   zz : int  
   rr = zz;
   zz = add(xx, yy);  
TEL 

Node normalized : 
NODE Op_plus (xx : int; yy : int) RETURNS (rr : int) 
VAR zz : int; 
PRE : yy : int ;
      xx : int 
LET 
   rr = zz;
   zz = add(xx, yy); 
TEL 
POST : rr : int  
LAMBDAS :  

Node normalized : 
NODE Op_plus (xx : int; yy : int) RETURNS (rr : int) 
VAR zz : int; 
PRE : yy : int ;
      xx : int 
LET 
   zz = add(xx, yy);
   rr = zz; 
TEL 
POST : rr : int  
LAMBDAS :  

