#!/usr/bin/env python
"""
Generate a scade2b-compatible xml file

Usage:
    gen-xml <spec>
    gen-xml --tests

"""

import docopt
import re
import sys
import unittest


def main():
    arguments = docopt.docopt(__doc__)
    if arguments['--tests']:
        unittest.main(argv=sys.argv[:1])
    node = parse_decl(arguments['<spec>'])
    print gen_xml(node)


def parse_decl(spec):
    typ_pat = r'(int|real)'
    arg_pat = r'(\w+):' + typ_pat
    pattern = r'(\w+)\(' + arg_pat + r'((;' + arg_pat + r')*)\)->' + arg_pat
    m = re.match(pattern, spec)
    name = m.group(1)
    kcg_types = {'int': 'kcg_int',
                 'real': 'kcg_real',
                 }

    def parse_extra_arg(arg):
        m = re.match(arg_pat, arg)
        return make_param(m.group(1), m.group(2))

    def make_param(name, typ):
        return {'name': name,
                'type': typ,
                'kcg_type': kcg_types[typ],
                }
    extra_args = m.group(4).split(';')[1:]
    first_arg = make_param(m.group(2), m.group(3))
    args = [first_arg] + [parse_extra_arg(a) for a in extra_args]
    ret = [make_param(m.group(8), m.group(9))]
    return {'name': name,
            'args': args,
            'ret': ret,
            }


class TestParse(unittest.TestCase):
    def _tc(self, spec, exp):
        actual = parse_decl(spec)
        self.assertEqual(exp, actual)

    def test_basic(self):
        self._tc('Fct(x:int)->r:int',
                 {'name': 'Fct',
                  'args': [{'name': 'x',
                            'type': 'int',
                            'kcg_type': 'kcg_int'}],
                  'ret': [{'name': 'r',
                           'type': 'int',
                           'kcg_type': 'kcg_int'}]
                  })

    def test_three_args(self):
        self._tc('Fct(x:int;y:int;z:int)->r:int',
                 {'name': 'Fct',
                  'args': [{'name': 'x',
                            'type': 'int',
                            'kcg_type': 'kcg_int'},
                           {'name': 'y',
                            'type': 'int',
                            'kcg_type': 'kcg_int'},
                           {'name': 'z',
                            'type': 'int',
                            'kcg_type': 'kcg_int'},
                           ],
                  'ret': [{'name': 'r',
                           'type': 'int',
                           'kcg_type': 'kcg_int'}]
                  })

    def test_real(self):
        self._tc('Fct(x:int;y:real)->r:int',
                 {'name': 'Fct',
                  'args': [{'name': 'x',
                            'type': 'int',
                            'kcg_type': 'kcg_int'},
                           {'name': 'y',
                            'type': 'real',
                            'kcg_type': 'kcg_real'},
                           ],
                  'ret': [{'name': 'r',
                           'type': 'int',
                           'kcg_type': 'kcg_int'}]
                  })

    def test_ret_real(self):
        self._tc('Fct(x:int)->r:real',
                 {'name': 'Fct',
                  'args': [{'name': 'x',
                            'type': 'int',
                            'kcg_type': 'kcg_int'}],
                  'ret': [{'name': 'r',
                           'type': 'real',
                           'kcg_type': 'kcg_real'}]
                  })


def gen_xml(spec):
    fmt = '<NoExpNode scadeName="{name}" targetCycleFct="{name}">\n'
    r = fmt.format(name=spec['name'])
    r += gen_inputs(spec['args'])
    r += gen_outputs(spec['ret'])
    r += """</NoExpNode>"""
    return r


def gen_inputs(args):
    r = ""
    for arg in args:
        fmt = '  <Input scadeName="{name}" scadeType="{type}"'
        fmt += ' targetName="{name}" targetType="{kcg_type}"/>\n'
        r += fmt.format(**arg)
    return r


def gen_outputs(rets):
    r = ""
    for ret in rets:
        fmt = '  <Output scadeName="{name}" scadeType="int"'
        fmt += ' targetName="{name}" targetType="kcg_int"/>\n'
        r += fmt.format(**ret)
    return r


if __name__ == '__main__':
    main()
