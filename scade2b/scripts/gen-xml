#!/usr/bin/env python
"""
Generate a scade2b-compatible xml file

Usage:
    gen-xml <spec>
    gen-xml --tests

"""

import docopt
import re
import sys
import unittest


def main():
    arguments = docopt.docopt(__doc__)
    if arguments['--tests']:
        unittest.main(argv=sys.argv[:1])
    node = parse_decl(arguments['<spec>'])
    print gen_xml(node)


def parse_decl(spec):
    arg_pat = r'(\w+):(int|real)'
    pattern = r'(\w+)\(' + arg_pat + r'((;' + arg_pat + r')*)\)->(\w+):int'
    m = re.match(pattern, spec)
    name = m.group(1)

    def parse_extra_arg(arg):
        m = re.match(arg_pat, arg)
        return {'name': m.group(1),
                'type': m.group(2)
                }
    extra_args = m.group(4).split(';')[1:]
    args = [{'name': m.group(2), 'type': m.group(3)}] + [parse_extra_arg(a) for a in extra_args]
    ret = [m.group(8)]
    return {'name': name,
            'args': args,
            'ret': ret,
            }


class TestParse(unittest.TestCase):
    def _tc(self, spec, exp):
        actual = parse_decl(spec)
        self.assertEqual(exp, actual)

    def test_basic(self):
        self._tc('Fct(x:int)->r:int', {'name': 'Fct',
                                       'args': [{'name': 'x', 'type': 'int'}],
                                       'ret': ['r']})

    def test_three_args(self):
        self._tc('Fct(x:int;y:int;z:int)->r:int', {'name': 'Fct',
                                                   'args': [{'name': 'x', 'type': 'int'},
                                                            {'name': 'y', 'type': 'int'},
                                                            {'name': 'z', 'type': 'int'},
                                                            ],
                                                   'ret': ['r']})

    def test_real(self):
        self._tc('Fct(x:int;y:real)->r:int', {'name': 'Fct',
                                       'args': [{'name': 'x', 'type': 'int'},
                                                {'name': 'y', 'type': 'real'},
                                                ],
                                       'ret': ['r']})



def gen_xml(spec):
    fmt = '<NoExpNode scadeName="{name}" targetCycleFct="{name}">\n'
    r = fmt.format(name=spec['name'])
    r += gen_inputs(spec['args'])
    r += gen_outputs(spec['ret'])
    r += """</NoExpNode>"""
    return r


def gen_inputs(args):
    r = ""
    for arg in args:
        fmt = '  <Input scadeName="{name}" scadeType="int"'
        fmt += ' targetName="{name}" targetType="kcg_int"/>\n'
        r += fmt.format(name=arg)
    return r


def gen_outputs(rets):
    r = ""
    for ret in rets:
        fmt = '  <Output scadeName="{name}" scadeType="int"'
        fmt += ' targetName="{name}" targetType="kcg_int"/>\n'
        r += fmt.format(name=ret)
    return r


if __name__ == '__main__':
    main()
